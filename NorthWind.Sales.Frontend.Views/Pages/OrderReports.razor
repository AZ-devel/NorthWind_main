@page "/OrderReports"
@using System.Net.Http.Json
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h3>Reporte de Órdenes</h3>

<div class="mb-3">
    <label for="quantityInput" class="form-label">Cantidad de Órdenes:</label>
    <div class="input-group">
        <input type="number" class="form-control" id="quantityInput" @bind="quantityToLoad" placeholder="Ej: 10, 50, 100..." min="1" max="50000" />
        <button class="btn btn-primary" @onclick="LoadOrders" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                <span>Cargando...</span>
            }
            else
            {
                <span>Cargar Órdenes</span>
            }
        </button>
    </div>
    <div class="form-text">Ingrese el Número de Órdenes para Lectura</div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (orders != null && orders.Any())
{
    <div class="alert alert-info" role="alert">
        Se encontraron <strong>@orders.Count</strong> órdenes - Mostrando página <strong>@currentPage</strong> de <strong>@totalPages</strong>
    </div>

    <!-- Configuración de paginación -->
    <div class="row mb-3">
        <div class="col-md-6">
            <label for="pageSizeSelect" class="form-label">Órdenes por página:</label>
            <select class="form-select" id="pageSizeSelect" @bind="pageSize" @bind:after="OnPageSizeChanged">
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="250">250</option>
                <option value="500">500</option>
            </select>
        </div>
        <div class="col-md-6 d-flex align-items-end">
            <div class="input-group">
                <span class="input-group-text">Ir a página:</span>
                <input type="number" class="form-control" @bind="goToPage" min="1" max="@totalPages" />
                <button class="btn btn-outline-secondary" @onclick="GoToSpecificPage">Ir</button>
            </div>
        </div>
    </div>

    <!-- Controles de paginación superior -->
    <nav aria-label="Navegación de órdenes">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(currentPage == 1)">Primera</button>
            </li>
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="PreviousPage" disabled="@(currentPage == 1)">Anterior</button>
            </li>

            @for (int i = GetStartPage(); i <= GetEndPage(); i++)
            {
                int pageNumber = i;
                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                </li>
            }

            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="NextPage" disabled="@(currentPage == totalPages)">Siguiente</button>
            </li>
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(totalPages)" disabled="@(currentPage == totalPages)">Última</button>
            </li>
        </ul>
    </nav>

    <!-- Tabla de órdenes -->
    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Customer ID</th>
                <th>Fecha de Orden</th>
                <th>Dirección de Envío</th>
                <th>Ciudad</th>
                <th>Total</th>
                <th>Detalles</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in GetCurrentPageOrders())
            {
                <tr>
                    <td>@order.OrderId</td>
                    <td>@order.CustomerId</td>
                    <td>@order.OrderDate.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@order.ShipAddress</td>
                    <td>@order.ShipCity</td>
                    <td>@CalculateOrderTotal(order).ToString("C")</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ToggleDetails(order.OrderId)">
                            @(expandedOrders.Contains(order.OrderId) ? "Ocultar" : "Ver")
                        </button>
                    </td>
                </tr>
                @if (expandedOrders.Contains(order.OrderId))
                {
                    <tr>
                        <td colspan="7">
                            <div class="p-3 bg-light">
                                <h6>Detalles de la Orden #@order.OrderId</h6>
                                <table class="table table-sm table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Product ID</th>
                                            <th>Cantidad</th>
                                            <th>Precio Unitario</th>
                                            <th>Subtotal</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var detail in order.OrderDetails)
                                        {
                                            <tr>
                                                <td>@detail.ProductId</td>
                                                <td>@detail.Quantity</td>
                                                <td>@detail.UnitPrice.ToString("C")</td>
                                                <td>@((detail.UnitPrice * detail.Quantity).ToString("C"))</td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot class="table-light">
                                        <tr>
                                            <th colspan="3" class="text-end">Total de la Orden:</th>
                                            <th>@CalculateOrderTotal(order).ToString("C")</th>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <!-- Controles de paginación inferior -->
    <nav aria-label="Navegación de órdenes">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(currentPage == 1)">Primera</button>
            </li>
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="PreviousPage" disabled="@(currentPage == 1)">Anterior</button>
            </li>

            @for (int i = GetStartPage(); i <= GetEndPage(); i++)
            {
                int pageNumber = i;
                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                </li>
            }

            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="NextPage" disabled="@(currentPage == totalPages)">Siguiente</button>
            </li>
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(totalPages)" disabled="@(currentPage == totalPages)">Última</button>
            </li>
        </ul>
    </nav>

    <!-- Información de paginación -->
    <div class="d-flex justify-content-between align-items-center mt-3">
        <div class="text-muted">
            Mostrando @GetCurrentRangeStart() - @GetCurrentRangeEnd() de @orders.Count órdenes
        </div>
        <div class="btn-group" role="group">
            <button class="btn btn-outline-secondary btn-sm" @onclick="CollapseAllDetails">Ocultar Todos</button>
            <button class="btn btn-outline-secondary btn-sm" @onclick="ScrollToTop">Ir Arriba</button>
        </div>
    </div>

    <!-- Resumen general -->
    @if (orders.Count > 0)
    {
        <div class="mt-4">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title">Resumen General</h6>
                    <div class="row">
                        <div class="col-md-4">
                            <strong>Total de Órdenes:</strong> @orders.Count
                        </div>
                        <div class="col-md-4">
                            <strong>Total de Productos:</strong> @orders.Sum(o => o.OrderDetails.Sum(d => d.Quantity))
                        </div>
                        <div class="col-md-4">
                            <strong>Valor Total:</strong> @orders.Sum(o => CalculateOrderTotal(o)).ToString("C")
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-4">
                            <strong>Promedio por Orden:</strong> @(orders.Count > 0 ? (orders.Sum(o => CalculateOrderTotal(o)) / orders.Count).ToString("C") : "$0.00")
                        </div>
                        <div class="col-md-4">
                            <strong>Páginas Totales:</strong> @totalPages
                        </div>
                        <div class="col-md-4">
                            <strong>Órdenes por Página:</strong> @pageSize
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

@if (orders != null && !orders.Any() && !isLoading)
{
    <div class="alert alert-warning" role="alert">
        No se encontraron órdenes.
    </div>
}

@code {
    private int? quantityToLoad;
    private List<OrderWithDetailsDto> orders = new();
    private HashSet<int> expandedOrders = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    // Variables de paginación
    private int currentPage = 1;
    private int pageSize = 25;
    private int totalPages = 0;
    private int goToPage = 1;

    protected override void OnInitialized()
    {
        CalculatePagination();
    }

    private async Task LoadOrders()
    {
        if (!quantityToLoad.HasValue || quantityToLoad <= 0)
        {
            errorMessage = "Por favor, ingrese una cantidad válida.";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;
        expandedOrders.Clear();
        currentPage = 1;

        try
        {
            var response = await Http.GetAsync($"https://localhost:7149/GetOrders/{quantityToLoad}");

            if (response.IsSuccessStatusCode)
            {
                var ordersData = await response.Content.ReadFromJsonAsync<List<OrderWithDetailsDto>>();
                orders = ordersData ?? new List<OrderWithDetailsDto>();
                CalculatePagination();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                errorMessage = "No se encontraron órdenes.";
                orders = new List<OrderWithDetailsDto>();
                CalculatePagination();
            }
            else
            {
                errorMessage = $"Error al consultar las órdenes: {response.StatusCode}";
                orders = new List<OrderWithDetailsDto>();
                CalculatePagination();
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Error de conexión. Verifique que el servidor esté ejecutándose en https://localhost:7149";
            orders = new List<OrderWithDetailsDto>();
            CalculatePagination();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
            orders = new List<OrderWithDetailsDto>();
            CalculatePagination();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculatePagination()
    {
        if (orders.Count == 0)
        {
            totalPages = 0;
            currentPage = 1;
        }
        else
        {
            totalPages = (int)Math.Ceiling((double)orders.Count / pageSize);
            if (currentPage > totalPages)
                currentPage = totalPages;
            if (currentPage < 1)
                currentPage = 1;
        }
        goToPage = currentPage;
    }

    private IEnumerable<OrderWithDetailsDto> GetCurrentPageOrders()
    {
        if (orders == null || !orders.Any())
            return new List<OrderWithDetailsDto>();

        int startIndex = (currentPage - 1) * pageSize;
        return orders.Skip(startIndex).Take(pageSize);
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            goToPage = page;
            expandedOrders.Clear(); // Limpiar detalles expandidos al cambiar página
            ScrollToTop();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            GoToPage(currentPage + 1);
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            GoToPage(currentPage - 1);
        }
    }

    private void GoToSpecificPage()
    {
        GoToPage(goToPage);
    }

    private void OnPageSizeChanged()
    {
        currentPage = 1;
        CalculatePagination();
        expandedOrders.Clear();
        _ = ScrollToTop(); // Fire and forget para el scroll
    }

    private int GetStartPage()
    {
        int start = Math.Max(1, currentPage - 2);
        return Math.Min(start, Math.Max(1, totalPages - 4));
    }

    private int GetEndPage()
    {
        int end = Math.Min(totalPages, currentPage + 2);
        return Math.Max(end, Math.Min(5, totalPages));
    }

    private int GetCurrentRangeStart()
    {
        if (orders.Count == 0) return 0;
        return (currentPage - 1) * pageSize + 1;
    }

    private int GetCurrentRangeEnd()
    {
        if (orders.Count == 0) return 0;
        return Math.Min(currentPage * pageSize, orders.Count);
    }

    private void CollapseAllDetails()
    {
        expandedOrders.Clear();
    }

    private async Task ScrollToTop()
    {
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
    }

    private void ToggleDetails(int orderId)
    {
        if (!expandedOrders.Add(orderId))
            expandedOrders.Remove(orderId);
    }

    private decimal CalculateOrderTotal(OrderWithDetailsDto order)
    {
        if (order?.OrderDetails == null) return 0;
        return order.OrderDetails.Sum(d => d.UnitPrice * d.Quantity);
    }

    // DTOs que coinciden con tu API
    public class OrderWithDetailsDto
    {
        public int OrderId { get; set; }
        public string CustomerId { get; set; } = string.Empty;
        public DateTime OrderDate { get; set; }
        public string ShipAddress { get; set; } = string.Empty;
        public string ShipCity { get; set; } = string.Empty;
        public List<OrderDetailDto> OrderDetails { get; set; } = new();
    }

    public class OrderDetailDto
    {
        public int OrderId { get; set; }
        public int ProductId { get; set; }
        public decimal UnitPrice { get; set; }
        public int Quantity { get; set; }
    }
}
